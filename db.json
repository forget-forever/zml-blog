{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1645000379186},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1645000744791},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1645000744791},{"_id":"public/2022/02/16/hello-world/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1646484817208},{"_id":"public/archives/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1646484817208},{"_id":"public/archives/2022/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1646484817208},{"_id":"public/archives/2022/02/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1646484817208},{"_id":"public/index.html","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1646484817208},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646483184898},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646483184898},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646483184898},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646483184898},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646483184898},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1646483184898},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1646483184898},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1646483184898},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646483184898},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1646483184898},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1646483184898},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646483184898},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708974},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708960},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708960},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708971},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708971},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708971},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708973},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646484708973},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1646484708956},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1646484708956},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1646484708956},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1646484708956},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1646484708956},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1646484708956},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1646484708956},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1646484708956},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1646484708956},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1646484708956},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1646484708957},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1646484708957},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1646484708964},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1646484708957},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1646484708957},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1646484708957},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1646484708956},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1646484708956},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1646484708964},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1646484708956},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1646484708964},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1646484708956},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1646484708963},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1646484708958},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1646484708963},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1646484708963},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1646484708963},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1646484708964},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1646484708964},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1646484708964},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1646484708957},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1646484708957},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1646484708957},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1646484708958},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1646484708957},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1646484708958},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1646484708958},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1646484708958},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1646484708958},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1646484708958},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1646484708958},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1646484708958},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1646484708958},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1646484708958},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1646484708958},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1646484708964},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1646484708958},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1646484708965},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1646484708965},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1646484708965},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1646484708965},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1646484708965},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1646484708965},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1646484708965},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1646484709008},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1646484709008},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1646484709008},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1646484708958},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1646484708958},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1646484708959},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1646484708959},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1646484708959},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1646484708959},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1646484708959},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1646484708965},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1646484708959},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1646484708959},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1646484708959},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1646484708959},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1646484708959},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1646484708959},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1646484708959},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1646484708960},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1646484708960},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1646484708960},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1646484708960},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1646484708962},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1646484708962},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1646484708962},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1646484708962},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1646484708962},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1646484708962},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1646484708974},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1646484708962},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1646484708974},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646484708974},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1646484708974},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1646484708974},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1646484708974},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1646484708974},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1646484708974},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1646484708974},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1646484708974},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1646484708975},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646484708975},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1646484708975},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646484708975},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646484708975},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646484708975},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1646484708975},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1646484708975},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1646484708975},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1646484708959},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1646484708959},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1646484708960},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1646484708960},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1646484708960},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1646484708960},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1646484708960},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1646484708960},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1646484708960},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1646484708960},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1646484708961},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1646484708960},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1646484708960},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1646484708961},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1646484708962},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1646484708962},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1646484708961},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1646484708961},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1646484708963},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1646484708963},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1646484708963},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1646484708963},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1646484708971},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1646484708971},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1646484708971},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1646484708971},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1646484708973},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1646484708973},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1646484708973},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1646484708975},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1646484708975},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1646484708975},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1646484708973},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1646484708975},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1646484708975},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1646484708976},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1646484708976},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1646484708976},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1646484708976},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1646484708976},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1646484708975},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1646484708980},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1646484708981},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1646484708981},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1646484708982},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1646484708982},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1646484708986},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1646484708986},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1646484708986},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1646484708986},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1646484708986},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1646484708986},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1646484708986},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1646484708987},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1646484708987},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1646484708996},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1646484708996},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1646484708996},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1646484708996},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1646484708996},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1646484708997},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1646484708997},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1646484708997},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1646484708997},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1646484708997},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1646484708998},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1646484708998},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1646484708998},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1646484708998},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1646484708998},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1646484709006},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1646484709007},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646484709008},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1646484708962},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1646484708963},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1646484708965},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646484709007},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1646484709008},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1646484708965},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1646484708965},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1646484708967},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1646484708971},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1646484708971},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1646484708971},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1646484708972},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1646484708969},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1646484708973},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1646484708973},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1646484708973},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1646484708973},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1646484708973},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1646484708973},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1646484708970},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1646484708970},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1646484708970},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1646484708970},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1646484708970},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1646484708971},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1646484708971},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1646484708976},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1646484708977},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1646484708979},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1646484708980},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646484708982},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646484708984},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1646484708985},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1646484708986},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1646484708986},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1646484708986},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1646484708987},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1646484708987},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1646484708987},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1646484709006},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1646484709006},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1646484708966},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1646484708967},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1646484708968},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1646484708972},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1646484708973},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1646484708976},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1646484708977},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1646484708977},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1646484708977},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646484708985},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1646484708977},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1646484708985},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1646484708985},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1646484708970},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1646484708968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1646484708969},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1646484708969},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1646484708996},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1646484708979},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646484708996},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646484708993},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646484708992},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646484708989},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646484708988},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1646484709007},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1646484708981},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646484708991},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1646484709006},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646484817208},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1646484817208},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1646484817208},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1646484817208},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1646484817208},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1646484817208},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1646484817208},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1646484817208},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1646484817208},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646484817208},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646484817208},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1646484817208},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1646484817208},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646484817208},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1646484817208},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1646484817208},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1646484817208},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646484817208},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1646484817208},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1646484817208},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646484817208},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646484817208},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646484817208},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646484817208},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646484817208},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1646484817208},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646484817208},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1646484817208},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1646484817208},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1646484817208},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646484817208},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1646484817208},{"_id":"public/css/main.css","hash":"0abbaa5ea8526af178d466a2475d563d13363c54","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646484817208},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1646484817208},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1646484817208},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1646484817208},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1646484817208},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1646484817208},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1646484817208},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1646484817208},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1646484817208},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1646484817208},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1646484817208},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1646484817208},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1646484817208},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1646484817208},{"_id":"public/lib/fastclick/README.html","hash":"1c2cb1168e9df516e311177476e499990453965d","modified":1646484817208},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1646484817208},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1646484817208},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1646484817208},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1646484817208},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1646484817208},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1646484817208},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1646484817208},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1646484817208},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1646484817208},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1646484817208},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1646484817208},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1646484817208},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1646484817208},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646484817208},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1646484817208},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1646484817208},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1646484817208},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646484817208},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1646484817208},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1646484817208},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1646484817208},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1646484817208},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1646484817208},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1646484817208},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1646484817208},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1646484817208},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1646484817208},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646484817208},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1646484817208},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1646484817208},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1646484817208},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1646484817208},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1646484817208},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1646484817208},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1646484817208},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1646484817208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646484817208},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1646484817208},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1646484817208},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1646484817208},{"_id":"source/_posts/typecript，让类型约束成为一种习惯.md","hash":"a30842696a7d33abb4bd5de320dc5fd20f5d191d","modified":1646538664842}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"typecript，让类型约束成为一种习惯","date":"2022-03-06T03:50:31.000Z","_content":"## 基础知识概述\n\n######        伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\n\n######         ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\n\n<h2>1、是开发和维护过程中的工具</h2>\n\n######        对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\n\n<ul><li><strong>约束某一块代码的具体功能</strong></li></ul>\n\n######        比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：\n\n```typescript\nconst foo = (arg: A): B => {\n    // do something....\n}\n```\n\n######        我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\n\n```typescript\nconst foo = (a: A): string | number | boolean => {\n    // do something...\n}\n```\n```typescript\nconst foo = (a: string | number | object | boolean): B => {\n    // do something...\n}\n```\n\n######        这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。 \n\n######        可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\n\n```typescript\ninterface foo {(a: A, b: string): void} // 参数a为类型A时，那么b的类型为string\ninterface foo {(a: B, b: number): void} // 参数a为类型B时，那么b的类型为number\ninterface foo {(a: C, b: number): D} // 参数a为类型C时，那么b的类型为number，且函数会有返回值D。\n```\n\n######        这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。    \n\n######        这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\n\n```typescript\ndeclare interface Foo {\n  (a: string, b: string): void;\n}// 参数a为类型string时，那么b的类型为string\ndeclare interface Foo {(a: boolean, b: number): void} // 参数a为类型boolean时，那么b的类型为number\nconst foo: Foo = (a: string | boolean, b: number | string) => {\n  // do something......\n}\n\nfoo('1', 2); // error,a为string类型时，b参数的类型为string\nfoo(false, 2); // ok👌\nfoo(true, '2') // error,第一个参数为boolean时，第二个参数必须为数字\n```\n###### 注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\n\n######         对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。 \n\n######        在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\n\n```typescript\ninterface IProps {\n    a: A1;\n    b: B1;\n};\ninterface IProps {\n    a: A2;\n    b: B2;\n}\nconst ComponentA: React.FC<IProps>;\n```\n\n######        同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便\n\n```typescript\ninterface ComponentA {\n    props: {....}\n    func(): A\n}\ninterface ComponentA {\n    props: {....}\n}\nclass ComponentA extends Component {\n    constructor() {\n        this.state = {.....}\n    }\n    render() {\n        return (....)\n    }\n}\n```\n\n######        这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\n\n<ul><li><strong>约束静态数据</strong></li></ul>\n\n######        作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时\n\n```typescript\nconst schedule = {\n  '00:00': 0,\n  '00:30': 0,\n  '01:00': 0,\n   // ..... 省略，每隔30一个\n  '12:00': 0,\n  '12:30': 1,\n  '13:00': 1,\n  '13:30': 1,\n  '22:30': 0,\n  '23:00': 0,\n  '23:30': 0,\n};\n```\n\n######        在只知道interface，type的时候会一项一项的列出来\n\n```typescript\ntype ISchedule = {\n  '00:00': number,\n  '00:30': number,\n  '01:00': number,\n   // ..... 省略，每隔30一个\n};\n```\n\n######        然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出\n\n```typescript\ntype ISchedule = {\n    [k in string]: number\n}\n```\n\n######        之后，更加深入的去知道了自带的工具类型\n\n```typescript\ntype ISchedule = {\n    [k in string]: number\n}\n```\n\n######        很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\n\n######         后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\n\n```typescript\ntype N = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0\ntype Time<T extends 0 | 1 | 2> = T extends 0 | 1 ? `${T}${N}` : `${T}${0|1|2|3}`\nenum CheckEnum {}\ntype A = Record<`${Time<0 | 1> | Time<2>}:${'00' | '30'}`, CheckEnum>\n```\n\n######        模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\n\n```typescript\ntype IUrl = `/${string}`\nexport request = <R>(url: IUrl, options) => Promise<T>\n```\n\n######        这样就可以避免犯前面忘了加 / 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\n\n<ul><li><strong>类型的断言</strong></li></ul>\n\n######        其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\n\n```typescript\ntype Foo1 = {\n  value: number,\n  type: 'a'\n}\ntype Foo2 = {\n  value: string,\n  type: 'b'\n}\nconst foo = (arg: Foo1 | Foo2) => {\n  if (arg.type === 'a'){\n    // arg is Foo1\n    console.log(arg)\n  }\n  if (arg.type === 'b') {\n    // arg is F002\n    console.log(arg)\n  }\n}\n```\n\n######        在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。 \n\n######       好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\n\n```typescript\n<Dialog visible={!!data} close={data.close}> // error, data可能为undefined\n // some thing\n</Dialog>\n```\n\n######        这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\n\n```typescript\n<Dialog visible={!!data} close={data!.close}> // ok, 这里可以用一个非空断言\n // some thing\n</Dialog>\n```\n\n######        大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\n\n######        但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\n\n```typescript\ntype Foo1 = {\n  value: number ｜ string,\n  type: string\n}\ntype Foo2 = {\n  value: string,\n  type: 'b'\n}\nconst foo = (arg: Foo2) => {\n  // do something\n}\nconst a: Foo1 = {\n    .....\n}\nfoo(a) // error, Foo1类型不能给Foo2类型！\nfoo(a as Foo2) //ok，Foo2类型只是比Foo1类型更小，此处的断言可以告诉ts，我比你更清楚这个数据\n```\n\n######        从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as ...、as any as ...。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\n\n<ul><li><strong>全局类型声明</strong></li></ul>\n\n######        应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\n\n```typescript\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n```\n\n###### 它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\n\n```typescript\ntype MyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n```\n\n###### 这样就可以使得MyOmit更符合我们的需求。 \n\n###### 下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？ \n\n###### 其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了\n\n```typescript\n// public.d.ts\ndeclare type MyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n```\n\n######        这样就好了，就可以在整个项目中使用了。 \n\n######        如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。 \n\n######        比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\n\n```typescript\n     /**\n         * Returns an array of key/values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries<T>(o: { [s: string]: T } | ArrayLike<T>): [string, T][];\n```\n\n######        这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\n\n```typescript\n// .d.ts\ndeclare interface ObjectConstructor {\n  entries<T>(obj: T): [keyof T, T[keyof T]][];\n}\n```\n\n<h2>2、是一个具有编程思想的语言</h2>\n\n###### 上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\n\n<ul><li><strong>interface、type、class的区别</strong></li></ul>\n\n###### 很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别： \n\n###### 1、type，class定义的类型不可以重复，interface定义的类型可以重复\n\n```typescript\ntype Record = {...} // error, Record已经被定义过\ninterface ObjectConstructor {\n    ......\n} // ok👌，interface 定义的类型可以重复定义，重新给Object的一些原型方法写类型\n```\n\n###### 这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以\n\n```typescript\ntype Keys = \"小王\" | \"小文\"\ntype X = {\n  [key in Keys]: string\n}\nconst test: X = {\n    '小王': '肌肉男',\n    '小文': '也是肌肉男'\n}\n\ninterface XX {\n    [k in keys]: string // error!!!\n}\n```\n\n###### 3、interface，class使用extends、implements组合类型，type则可以通过&, |符号组合、合并类型。\n\n```typescript\ninterface Animals1 {\n    ...\n}\ninterface Animals2 {\n    ...\n}\ninterface Cat extends Animals1, Animals2 {\n    ...\n}\n\ntype Dog = Animals1 & Animals2 & {\n    ...\n}\n```\n\n###### 4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\n\n```typescript\n// a.d.ts\nexport interface Foo {\n    aa: string;\n    ....\n}\n// {aa: string, ...}\n```\n\n```typescript\n// b.d.ts\nimport type { Foo } from 'a'\ninterface Foo {\n    aa: number;\n    ...\n}\n// {aa: number; ...}\n```\n\n###### 5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\n\n```typescript\nconst foo = {\n    a: 'a',\n    b: 2,\n    c: true\n}\ntype Foo = typeof foo //{ a: string, b: 2, c: boolean }\n```\n\n######        从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\n\n```typescript\ninterface Animal1 {\n    a: string;\n}\ninterface Animal2 {\n    b: number;\n}\ninterface Animal extends Animal1, Animal2 {\n    ...\n} // interface 可以使用extends集成\nclass Animal implements Animal1, Animal2 {\n    ...\n} // 也可以使用class的extends和implements进行继承\n```\n\n###### 可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。\n\n```typescript\nconst defaultData = {\n    name: string;\n    age: number;\n}\ntype IDefaultData = typeof defaultData // {name: string; age: number}\ntype Ikeys = keyof defaultData\n```\n\n###### 同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算\n\n```typescript\nconst defaultData = {\n    name: string;\n    age: number;\n}\ntype IDefaultData = typeof defaultData // {name: string; age: number}\ntype Ikeys = keyof defaultData\n\ntype IData = Record<string, typeof defaultData>;\ntype IList  = Record<string, Pick<IDefaultData, 'name'> & {sex: number}>\n```\n```typescript\ntype Foo<T> = T extends { a: infer U; b: infer U } ? U : never;\ntype T0 = Foo<{a: string, b: string}> // string\ntype T1 = Foo<{a: string, b: number}> // string | number\ntype T6 = Foo<{a: number, c: string, b: symbol}> // symbol\n```\n\n<ul><li><strong>类型的推导</strong></li></ul>\n\n###### 类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\n\n```typescript\ntype Foo1 = {\n    a: A1 //就当它是A1类型吧\n    b: B1 // 就当它是B1类型吧\n}\n\ntype Foo2 = Record<keyof Foo1, Foo>\n```\n\n###### 而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\n\n```typescript\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n```\n\n<ul><li><strong>类型的条件语句</strong></li></ul>\n\n###### 这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。\n\n```typescript\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); // ok👌， arg 受Lengthwise约束，因此lenght是有的\n  return arg;\n}\n```\n```typescript\ntype Foo<T extends 0 | 1 | 2> = T extends 0 | 1 ? `${T}${N}` : `${T}${0|1|2|3}`\n// 也可以通过extends的约束功能给类型做一个三元表达的条件语句运算`\n```\n\n<ul><li><strong>类型的循环遍历</strong></li></ul>\n\n######        既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用\n\n```typescript\ntype Foo = {\n    a: string;\n    b: number;\n    c: boolean;\n    d: symbol;\n}\ntype A = {\n    [k in keyof Foo]: B;\n}\n// {a: B; b: B; c: B; d: B}\n\ninterface A {\n    [k in keyof Foo]: B;\n} // error,别问为什么不可以，语言就是这样\n```\n\n###### 甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\n\n```typescript\ntype Foo = {\n    a: string;\n    b: number;\n    c: boolean;\n    d: symbol;\n}\ntype A = {\n    [ `get${k}` in keyof Foo]: B;\n}\n// {geta: B; getb: B; getc: B; getd: B}\n\n```\n\n###### 同样，作为\n\n<ul><li><strong>静态数据的类型</strong></li></ul>\n\n###### 说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时\n\n```typescript\ntype Foo  = {\n    status: number;\n}\ntype Foo = {\n    mode: string;\n}\n```\n\n###### 这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\n\n```typescript\nif(status === 0) {\n    // do something\n}\nif (mode === 'xxx') {\n    // do something\n}\n```\n\n###### 这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试\n\n```typescript\nif(status === 0) {\n    // do something\n}\nif (mode === 'xxx') {\n    // do something\n}\n```\n\n###### 如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\n\n```typescript\nenum IStatus {\n    off,\n    on\n} // {off: 0, on: 1}\ntype Foo  = {\n    status: Istatus;\n}// 在之后的过程中都可以使用这个IStatus枚举\n```\n\n###### 通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。\n\n```typescript\ncosnt arr = ['a', 'b', 'c'] \ntype Foo = typeof arr // string[]\n// 这个时候ts的反推类型就是string[]\n```\n```typescript\ncosnt arr = ['a', 'b', 'c'] as const\ntype Foo = typeof arr // ['a', 'b', 'c']\n// 这个时候ts的反推类型就是只读熟悉了，它可以用来弥补readonly的一些缺陷\n```\n\n<ul><li><strong>动态类型的定义</strong></li></ul>\n\n###### 是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\n\n```typescript\nconst foo = <T extends {type: 'a'|'b', val: any}>(arg: T) => {\n    switch (arg.type){\n        case 'a': ...\n        case 'b': ...\n    }\n    return arg.val\n}\n```\n```typescript\nclass Foo<T, U> {\n    a: T\n    b: U\n    foo: (a: T) => void\n}\n```\n\n###### 类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起\n\n```typescript\nexport declare type ProSchema<T = Record<string, unknown>, Extra = unknown, V = ProSchemaComponentTypes, ValueType = 'text'> = {\n    /** @name 确定这个列的唯一值 */\n    key?: React.ReactText;\n    /**\n     * 支持一个数字，[a,b] 会转化为 obj.a.b\n     *\n     * @name 与实体映射的key\n     */\n    dataIndex?: keyof T;\n\n    render?: (dom: React.ReactNode, entity: T, index: number, action: ProCoreActionType, schema: ProSchema<T, Extra> & {\n        isEditable?: boolean;\n        type: V;\n    }) => React.ReactNode;\n}\n```\n\n###### 处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。","source":"_posts/typecript，让类型约束成为一种习惯.md","raw":"---\ntitle: typecript，让类型约束成为一种习惯\ndate: 2022-03-06 11:50:31\ntags:\n---\n## 基础知识概述\n\n######        伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\n\n######         ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\n\n<h2>1、是开发和维护过程中的工具</h2>\n\n######        对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\n\n<ul><li><strong>约束某一块代码的具体功能</strong></li></ul>\n\n######        比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：\n\n```typescript\nconst foo = (arg: A): B => {\n    // do something....\n}\n```\n\n######        我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\n\n```typescript\nconst foo = (a: A): string | number | boolean => {\n    // do something...\n}\n```\n```typescript\nconst foo = (a: string | number | object | boolean): B => {\n    // do something...\n}\n```\n\n######        这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。 \n\n######        可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\n\n```typescript\ninterface foo {(a: A, b: string): void} // 参数a为类型A时，那么b的类型为string\ninterface foo {(a: B, b: number): void} // 参数a为类型B时，那么b的类型为number\ninterface foo {(a: C, b: number): D} // 参数a为类型C时，那么b的类型为number，且函数会有返回值D。\n```\n\n######        这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。    \n\n######        这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\n\n```typescript\ndeclare interface Foo {\n  (a: string, b: string): void;\n}// 参数a为类型string时，那么b的类型为string\ndeclare interface Foo {(a: boolean, b: number): void} // 参数a为类型boolean时，那么b的类型为number\nconst foo: Foo = (a: string | boolean, b: number | string) => {\n  // do something......\n}\n\nfoo('1', 2); // error,a为string类型时，b参数的类型为string\nfoo(false, 2); // ok👌\nfoo(true, '2') // error,第一个参数为boolean时，第二个参数必须为数字\n```\n###### 注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\n\n######         对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。 \n\n######        在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\n\n```typescript\ninterface IProps {\n    a: A1;\n    b: B1;\n};\ninterface IProps {\n    a: A2;\n    b: B2;\n}\nconst ComponentA: React.FC<IProps>;\n```\n\n######        同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便\n\n```typescript\ninterface ComponentA {\n    props: {....}\n    func(): A\n}\ninterface ComponentA {\n    props: {....}\n}\nclass ComponentA extends Component {\n    constructor() {\n        this.state = {.....}\n    }\n    render() {\n        return (....)\n    }\n}\n```\n\n######        这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\n\n<ul><li><strong>约束静态数据</strong></li></ul>\n\n######        作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时\n\n```typescript\nconst schedule = {\n  '00:00': 0,\n  '00:30': 0,\n  '01:00': 0,\n   // ..... 省略，每隔30一个\n  '12:00': 0,\n  '12:30': 1,\n  '13:00': 1,\n  '13:30': 1,\n  '22:30': 0,\n  '23:00': 0,\n  '23:30': 0,\n};\n```\n\n######        在只知道interface，type的时候会一项一项的列出来\n\n```typescript\ntype ISchedule = {\n  '00:00': number,\n  '00:30': number,\n  '01:00': number,\n   // ..... 省略，每隔30一个\n};\n```\n\n######        然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出\n\n```typescript\ntype ISchedule = {\n    [k in string]: number\n}\n```\n\n######        之后，更加深入的去知道了自带的工具类型\n\n```typescript\ntype ISchedule = {\n    [k in string]: number\n}\n```\n\n######        很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\n\n######         后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\n\n```typescript\ntype N = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0\ntype Time<T extends 0 | 1 | 2> = T extends 0 | 1 ? `${T}${N}` : `${T}${0|1|2|3}`\nenum CheckEnum {}\ntype A = Record<`${Time<0 | 1> | Time<2>}:${'00' | '30'}`, CheckEnum>\n```\n\n######        模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\n\n```typescript\ntype IUrl = `/${string}`\nexport request = <R>(url: IUrl, options) => Promise<T>\n```\n\n######        这样就可以避免犯前面忘了加 / 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\n\n<ul><li><strong>类型的断言</strong></li></ul>\n\n######        其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\n\n```typescript\ntype Foo1 = {\n  value: number,\n  type: 'a'\n}\ntype Foo2 = {\n  value: string,\n  type: 'b'\n}\nconst foo = (arg: Foo1 | Foo2) => {\n  if (arg.type === 'a'){\n    // arg is Foo1\n    console.log(arg)\n  }\n  if (arg.type === 'b') {\n    // arg is F002\n    console.log(arg)\n  }\n}\n```\n\n######        在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。 \n\n######       好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\n\n```typescript\n<Dialog visible={!!data} close={data.close}> // error, data可能为undefined\n // some thing\n</Dialog>\n```\n\n######        这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\n\n```typescript\n<Dialog visible={!!data} close={data!.close}> // ok, 这里可以用一个非空断言\n // some thing\n</Dialog>\n```\n\n######        大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\n\n######        但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\n\n```typescript\ntype Foo1 = {\n  value: number ｜ string,\n  type: string\n}\ntype Foo2 = {\n  value: string,\n  type: 'b'\n}\nconst foo = (arg: Foo2) => {\n  // do something\n}\nconst a: Foo1 = {\n    .....\n}\nfoo(a) // error, Foo1类型不能给Foo2类型！\nfoo(a as Foo2) //ok，Foo2类型只是比Foo1类型更小，此处的断言可以告诉ts，我比你更清楚这个数据\n```\n\n######        从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as ...、as any as ...。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\n\n<ul><li><strong>全局类型声明</strong></li></ul>\n\n######        应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\n\n```typescript\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n```\n\n###### 它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\n\n```typescript\ntype MyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n```\n\n###### 这样就可以使得MyOmit更符合我们的需求。 \n\n###### 下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？ \n\n###### 其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了\n\n```typescript\n// public.d.ts\ndeclare type MyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n```\n\n######        这样就好了，就可以在整个项目中使用了。 \n\n######        如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。 \n\n######        比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\n\n```typescript\n     /**\n         * Returns an array of key/values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries<T>(o: { [s: string]: T } | ArrayLike<T>): [string, T][];\n```\n\n######        这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\n\n```typescript\n// .d.ts\ndeclare interface ObjectConstructor {\n  entries<T>(obj: T): [keyof T, T[keyof T]][];\n}\n```\n\n<h2>2、是一个具有编程思想的语言</h2>\n\n###### 上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\n\n<ul><li><strong>interface、type、class的区别</strong></li></ul>\n\n###### 很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别： \n\n###### 1、type，class定义的类型不可以重复，interface定义的类型可以重复\n\n```typescript\ntype Record = {...} // error, Record已经被定义过\ninterface ObjectConstructor {\n    ......\n} // ok👌，interface 定义的类型可以重复定义，重新给Object的一些原型方法写类型\n```\n\n###### 这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以\n\n```typescript\ntype Keys = \"小王\" | \"小文\"\ntype X = {\n  [key in Keys]: string\n}\nconst test: X = {\n    '小王': '肌肉男',\n    '小文': '也是肌肉男'\n}\n\ninterface XX {\n    [k in keys]: string // error!!!\n}\n```\n\n###### 3、interface，class使用extends、implements组合类型，type则可以通过&, |符号组合、合并类型。\n\n```typescript\ninterface Animals1 {\n    ...\n}\ninterface Animals2 {\n    ...\n}\ninterface Cat extends Animals1, Animals2 {\n    ...\n}\n\ntype Dog = Animals1 & Animals2 & {\n    ...\n}\n```\n\n###### 4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\n\n```typescript\n// a.d.ts\nexport interface Foo {\n    aa: string;\n    ....\n}\n// {aa: string, ...}\n```\n\n```typescript\n// b.d.ts\nimport type { Foo } from 'a'\ninterface Foo {\n    aa: number;\n    ...\n}\n// {aa: number; ...}\n```\n\n###### 5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\n\n```typescript\nconst foo = {\n    a: 'a',\n    b: 2,\n    c: true\n}\ntype Foo = typeof foo //{ a: string, b: 2, c: boolean }\n```\n\n######        从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\n\n```typescript\ninterface Animal1 {\n    a: string;\n}\ninterface Animal2 {\n    b: number;\n}\ninterface Animal extends Animal1, Animal2 {\n    ...\n} // interface 可以使用extends集成\nclass Animal implements Animal1, Animal2 {\n    ...\n} // 也可以使用class的extends和implements进行继承\n```\n\n###### 可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。\n\n```typescript\nconst defaultData = {\n    name: string;\n    age: number;\n}\ntype IDefaultData = typeof defaultData // {name: string; age: number}\ntype Ikeys = keyof defaultData\n```\n\n###### 同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算\n\n```typescript\nconst defaultData = {\n    name: string;\n    age: number;\n}\ntype IDefaultData = typeof defaultData // {name: string; age: number}\ntype Ikeys = keyof defaultData\n\ntype IData = Record<string, typeof defaultData>;\ntype IList  = Record<string, Pick<IDefaultData, 'name'> & {sex: number}>\n```\n```typescript\ntype Foo<T> = T extends { a: infer U; b: infer U } ? U : never;\ntype T0 = Foo<{a: string, b: string}> // string\ntype T1 = Foo<{a: string, b: number}> // string | number\ntype T6 = Foo<{a: number, c: string, b: symbol}> // symbol\n```\n\n<ul><li><strong>类型的推导</strong></li></ul>\n\n###### 类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\n\n```typescript\ntype Foo1 = {\n    a: A1 //就当它是A1类型吧\n    b: B1 // 就当它是B1类型吧\n}\n\ntype Foo2 = Record<keyof Foo1, Foo>\n```\n\n###### 而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\n\n```typescript\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n```\n\n<ul><li><strong>类型的条件语句</strong></li></ul>\n\n###### 这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。\n\n```typescript\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); // ok👌， arg 受Lengthwise约束，因此lenght是有的\n  return arg;\n}\n```\n```typescript\ntype Foo<T extends 0 | 1 | 2> = T extends 0 | 1 ? `${T}${N}` : `${T}${0|1|2|3}`\n// 也可以通过extends的约束功能给类型做一个三元表达的条件语句运算`\n```\n\n<ul><li><strong>类型的循环遍历</strong></li></ul>\n\n######        既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用\n\n```typescript\ntype Foo = {\n    a: string;\n    b: number;\n    c: boolean;\n    d: symbol;\n}\ntype A = {\n    [k in keyof Foo]: B;\n}\n// {a: B; b: B; c: B; d: B}\n\ninterface A {\n    [k in keyof Foo]: B;\n} // error,别问为什么不可以，语言就是这样\n```\n\n###### 甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\n\n```typescript\ntype Foo = {\n    a: string;\n    b: number;\n    c: boolean;\n    d: symbol;\n}\ntype A = {\n    [ `get${k}` in keyof Foo]: B;\n}\n// {geta: B; getb: B; getc: B; getd: B}\n\n```\n\n###### 同样，作为\n\n<ul><li><strong>静态数据的类型</strong></li></ul>\n\n###### 说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时\n\n```typescript\ntype Foo  = {\n    status: number;\n}\ntype Foo = {\n    mode: string;\n}\n```\n\n###### 这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\n\n```typescript\nif(status === 0) {\n    // do something\n}\nif (mode === 'xxx') {\n    // do something\n}\n```\n\n###### 这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试\n\n```typescript\nif(status === 0) {\n    // do something\n}\nif (mode === 'xxx') {\n    // do something\n}\n```\n\n###### 如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\n\n```typescript\nenum IStatus {\n    off,\n    on\n} // {off: 0, on: 1}\ntype Foo  = {\n    status: Istatus;\n}// 在之后的过程中都可以使用这个IStatus枚举\n```\n\n###### 通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。\n\n```typescript\ncosnt arr = ['a', 'b', 'c'] \ntype Foo = typeof arr // string[]\n// 这个时候ts的反推类型就是string[]\n```\n```typescript\ncosnt arr = ['a', 'b', 'c'] as const\ntype Foo = typeof arr // ['a', 'b', 'c']\n// 这个时候ts的反推类型就是只读熟悉了，它可以用来弥补readonly的一些缺陷\n```\n\n<ul><li><strong>动态类型的定义</strong></li></ul>\n\n###### 是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\n\n```typescript\nconst foo = <T extends {type: 'a'|'b', val: any}>(arg: T) => {\n    switch (arg.type){\n        case 'a': ...\n        case 'b': ...\n    }\n    return arg.val\n}\n```\n```typescript\nclass Foo<T, U> {\n    a: T\n    b: U\n    foo: (a: T) => void\n}\n```\n\n###### 类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起\n\n```typescript\nexport declare type ProSchema<T = Record<string, unknown>, Extra = unknown, V = ProSchemaComponentTypes, ValueType = 'text'> = {\n    /** @name 确定这个列的唯一值 */\n    key?: React.ReactText;\n    /**\n     * 支持一个数字，[a,b] 会转化为 obj.a.b\n     *\n     * @name 与实体映射的key\n     */\n    dataIndex?: keyof T;\n\n    render?: (dom: React.ReactNode, entity: T, index: number, action: ProCoreActionType, schema: ProSchema<T, Extra> & {\n        isEditable?: boolean;\n        type: V;\n    }) => React.ReactNode;\n}\n```\n\n###### 处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。","slug":"typecript，让类型约束成为一种习惯","published":1,"updated":"2022-03-06T03:51:04.842Z","_id":"cl0eql7fd0001gofyhzjybabx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础知识概述\"><a href=\"#基础知识概述\" class=\"headerlink\" title=\"基础知识概述\"></a>基础知识概述</h2><h6 id=\"伴随着ts4-3的发布，ts4-4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\"><a href=\"#伴随着ts4-3的发布，ts4-4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\" class=\"headerlink\" title=\"伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\"></a>伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。</h6><h6 id=\"ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\"><a href=\"#ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\" class=\"headerlink\" title=\"ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\"></a>ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。</h6><h2>1、是开发和维护过程中的工具</h2>\n\n<h6 id=\"对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\"><a href=\"#对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\" class=\"headerlink\" title=\"对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\"></a>对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。</h6><ul><li><strong>约束某一块代码的具体功能</strong></li></ul>\n\n<h6 id=\"比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。-比如说：\"><a href=\"#比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。-比如说：\" class=\"headerlink\" title=\"比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：\"></a>比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">arg</span>: A): <span class=\"function\"><span class=\"params\">B</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\"><a href=\"#我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\" class=\"headerlink\" title=\"我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\"></a>我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">a</span>: A): <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\"><span class=\"params\">boolean</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">object</span> | <span class=\"built_in\">boolean</span>): <span class=\"function\"><span class=\"params\">B</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\"><a href=\"#这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\" class=\"headerlink\" title=\"这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\"></a>这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。</h6><h6 id=\"可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\"><a href=\"#可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\" class=\"headerlink\" title=\"可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\"></a>可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: A, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型A时，那么b的类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: B, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型B时，那么b的类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: C, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): D&#125; <span class=\"comment\">// 参数a为类型C时，那么b的类型为number，且函数会有返回值D。</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\"><a href=\"#这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\" class=\"headerlink\" title=\"这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\"></a>这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。</h6><h6 id=\"这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\"><a href=\"#这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\" class=\"headerlink\" title=\"这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\"></a>这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 参数a为类型string时，那么b的类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;(<span class=\"attr\">a</span>: <span class=\"built_in\">boolean</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型boolean时，那么b的类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>: <span class=\"title class_\">Foo</span> = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">string</span> | <span class=\"built_in\">boolean</span>, b: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">2</span>); <span class=\"comment\">// error,a为string类型时，b参数的类型为string</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"literal\">false</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ok👌</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"literal\">true</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// error,第一个参数为boolean时，第二个参数必须为数字</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\"><a href=\"#注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\" class=\"headerlink\" title=\"注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\"></a>注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。</h6><h6 id=\"对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。-其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\"><a href=\"#对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。-其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\" class=\"headerlink\" title=\"对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\"></a>对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。</h6><h6 id=\"在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\"><a href=\"#在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\" class=\"headerlink\" title=\"在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\"></a>在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A1</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A2</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ComponentA</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">IProps</span>&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。-在class组件中，这样的做法会显得更加简便\"><a href=\"#同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。-在class组件中，这样的做法会显得更加简便\" class=\"headerlink\" title=\"同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便\"></a>同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ComponentA</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;....&#125;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(): A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ComponentA</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ComponentA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;.....&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (....)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\"><a href=\"#这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\" class=\"headerlink\" title=\"这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\"></a>这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。</h6><ul><li><strong>约束静态数据</strong></li></ul>\n\n<h6 id=\"作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。-比如说我们在定义如下数据的类型时\"><a href=\"#作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。-比如说我们在定义如下数据的类型时\" class=\"headerlink\" title=\"作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时\"></a>作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> schedule = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;01:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"comment\">// ..... 省略，每隔30一个</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;12:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;12:30&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;13:00&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;13:30&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;22:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;23:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;23:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在只知道interface，type的时候会一项一项的列出来\"><a href=\"#在只知道interface，type的时候会一项一项的列出来\" class=\"headerlink\" title=\"在只知道interface，type的时候会一项一项的列出来\"></a>在只知道interface，type的时候会一项一项的列出来</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:00&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:30&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;01:00&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">   <span class=\"comment\">// ..... 省略，每隔30一个</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"然后再深入，知道了-in-，然后又会觉得，类型不过如此，会直接在写出\"><a href=\"#然后再深入，知道了-in-，然后又会觉得，类型不过如此，会直接在写出\" class=\"headerlink\" title=\"然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出\"></a>然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"之后，更加深入的去知道了自带的工具类型\"><a href=\"#之后，更加深入的去知道了自带的工具类型\" class=\"headerlink\" title=\"之后，更加深入的去知道了自带的工具类型\"></a>之后，更加深入的去知道了自带的工具类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\"><a href=\"#很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\" class=\"headerlink\" title=\"很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\"></a>很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。</h6><h6 id=\"后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\"><a href=\"#后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\" class=\"headerlink\" title=\"后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\"></a>后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> N = <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span> | <span class=\"number\">4</span> | <span class=\"number\">5</span> | <span class=\"number\">6</span> | <span class=\"number\">7</span> | <span class=\"number\">8</span> | <span class=\"number\">9</span> | <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Time</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;N&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> <span class=\"title class_\">CheckEnum</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Record</span>&lt;<span class=\"string\">`<span class=\"subst\">$&#123;Time&lt;<span class=\"number\">0</span> | <span class=\"number\">1</span>&gt; | Time&lt;<span class=\"number\">2</span>&gt;&#125;</span>:<span class=\"subst\">$&#123;<span class=\"string\">&#x27;00&#x27;</span> | <span class=\"string\">&#x27;30&#x27;</span>&#125;</span>`</span>, <span class=\"title class_\">CheckEnum</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"模板字符串，它集成了-in-语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。-当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性-比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\"><a href=\"#模板字符串，它集成了-in-语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。-当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性-比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\" class=\"headerlink\" title=\"模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\"></a>模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IUrl</span> = <span class=\"string\">`/<span class=\"subst\">$&#123;<span class=\"built_in\">string</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> request = &lt;R&gt;<span class=\"function\">(<span class=\"params\">url: IUrl, options</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就可以避免犯前面忘了加-x2F-这样的低级错误。-此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\"><a href=\"#这样就可以避免犯前面忘了加-x2F-这样的低级错误。-此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\" class=\"headerlink\" title=\"这样就可以避免犯前面忘了加 &#x2F; 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\"></a>这样就可以避免犯前面忘了加 &#x2F; 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。</h6><ul><li><strong>类型的断言</strong></li></ul>\n\n<h6 id=\"其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\"><a href=\"#其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\" class=\"headerlink\" title=\"其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\"></a>其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">arg: Foo1 | Foo2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg.<span class=\"property\">type</span> === <span class=\"string\">&#x27;a&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// arg is Foo1</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg.<span class=\"property\">type</span> === <span class=\"string\">&#x27;b&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// arg is F002</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\"><a href=\"#在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\" class=\"headerlink\" title=\"在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\"></a>在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。</h6><h6 id=\"好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\"><a href=\"#好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\" class=\"headerlink\" title=\"好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\"></a>好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Dialog</span> visible=&#123;!!data&#125; close=&#123;data.<span class=\"property\">close</span>&#125;&gt; <span class=\"comment\">// error, data可能为undefined</span></span><br><span class=\"line\"> <span class=\"comment\">// some thing</span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">Dialog</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\"><a href=\"#这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\" class=\"headerlink\" title=\"这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\"></a>这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Dialog</span> visible=&#123;!!data&#125; close=&#123;data!.<span class=\"property\">close</span>&#125;&gt; <span class=\"comment\">// ok, 这里可以用一个非空断言</span></span><br><span class=\"line\"> <span class=\"comment\">// some thing</span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">Dialog</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"大部分的时候非空断言-，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\"><a href=\"#大部分的时候非空断言-，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\" class=\"headerlink\" title=\"大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\"></a>大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。</h6><h6 id=\"但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\"><a href=\"#但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\" class=\"headerlink\" title=\"但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\"></a>但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">number</span> ｜ <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">arg: Foo2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a</span>: <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a) <span class=\"comment\">// error, Foo1类型不能给Foo2类型！</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a <span class=\"keyword\">as</span> <span class=\"title class_\">Foo2</span>) <span class=\"comment\">//ok，Foo2类型只是比Foo1类型更小，此处的断言可以告诉ts，我比你更清楚这个数据</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as-unknown-as-…、as-any-as-…。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。-话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\"><a href=\"#从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as-unknown-as-…、as-any-as-…。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。-话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\" class=\"headerlink\" title=\"从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as …、as any as …。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\"></a>从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as …、as any as …。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。</h6><ul><li><strong>全局类型声明</strong></li></ul>\n\n<h6 id=\"应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\"><a href=\"#应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\" class=\"headerlink\" title=\"应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\"></a>应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Omit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\"><a href=\"#它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\" class=\"headerlink\" title=\"它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\"></a>它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyOmit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就可以使得MyOmit更符合我们的需求。\"><a href=\"#这样就可以使得MyOmit更符合我们的需求。\" class=\"headerlink\" title=\"这样就可以使得MyOmit更符合我们的需求。\"></a>这样就可以使得MyOmit更符合我们的需求。</h6><h6 id=\"下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\"><a href=\"#下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\" class=\"headerlink\" title=\"下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\"></a>下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？</h6><h6 id=\"其实这个也很简单，只需要在根目录下定义一个-d-ts，文件就好了\"><a href=\"#其实这个也很简单，只需要在根目录下定义一个-d-ts，文件就好了\" class=\"headerlink\" title=\"其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了\"></a>其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">type</span> <span class=\"title class_\">MyOmit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就好了，就可以在整个项目中使用了。\"><a href=\"#这样就好了，就可以在整个项目中使用了。\" class=\"headerlink\" title=\"这样就好了，就可以在整个项目中使用了。\"></a>这样就好了，就可以在整个项目中使用了。</h6><h6 id=\"如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\"><a href=\"#如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\" class=\"headerlink\" title=\"如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\"></a>如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。</h6><h6 id=\"比如说，在使用Object-entries的时候，通过lib-es2017-d-ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\"><a href=\"#比如说，在使用Object-entries的时候，通过lib-es2017-d-ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\" class=\"headerlink\" title=\"比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\"></a>比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an array of key/values of the enumerable properties of an object</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">entries&lt;T&gt;(<span class=\"attr\">o</span>: &#123; [<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>]: T &#125; | <span class=\"title class_\">ArrayLike</span>&lt;T&gt;): [<span class=\"built_in\">string</span>, T][];</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\"><a href=\"#这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\" class=\"headerlink\" title=\"这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\"></a>这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ObjectConstructor</span> &#123;</span><br><span class=\"line\">  entries&lt;T&gt;(<span class=\"attr\">obj</span>: T): [keyof T, T[keyof T]][];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2>2、是一个具有编程思想的语言</h2>\n\n<h6 id=\"上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\"><a href=\"#上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\" class=\"headerlink\" title=\"上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\"></a>上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。</h6><ul><li><strong>interface、type、class的区别</strong></li></ul>\n\n<h6 id=\"很多人对interface、type的理解仅仅只是一个声明类型方式的区别。-但是事实上，它就是类型定义的一个区别。-只不过，有以下几点的区别：\"><a href=\"#很多人对interface、type的理解仅仅只是一个声明类型方式的区别。-但是事实上，它就是类型定义的一个区别。-只不过，有以下几点的区别：\" class=\"headerlink\" title=\"很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别：\"></a>很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别：</h6><h6 id=\"1、type，class定义的类型不可以重复，interface定义的类型可以重复\"><a href=\"#1、type，class定义的类型不可以重复，interface定义的类型可以重复\" class=\"headerlink\" title=\"1、type，class定义的类型不可以重复，interface定义的类型可以重复\"></a>1、type，class定义的类型不可以重复，interface定义的类型可以重复</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Record</span> = &#123;...&#125; <span class=\"comment\">// error, Record已经被定义过</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ObjectConstructor</span> &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125; <span class=\"comment\">// ok👌，interface 定义的类型可以重复定义，重新给Object的一些原型方法写类型</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这就是在上节中所讲的类型可以被重写的另一个知识点。-2、type声明的对象可以使用-in-，interface，class的不可以\"><a href=\"#这就是在上节中所讲的类型可以被重写的另一个知识点。-2、type声明的对象可以使用-in-，interface，class的不可以\" class=\"headerlink\" title=\"这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以\"></a>这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Keys</span> = <span class=\"string\">&quot;小王&quot;</span> | <span class=\"string\">&quot;小文&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> X = &#123;</span><br><span class=\"line\">  [key <span class=\"keyword\">in</span> <span class=\"title class_\">Keys</span>]: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">test</span>: X = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;小王&#x27;</span>: <span class=\"string\">&#x27;肌肉男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;小文&#x27;</span>: <span class=\"string\">&#x27;也是肌肉男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> XX &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keys]: <span class=\"built_in\">string</span> <span class=\"comment\">// error!!!</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、interface，class使用extends、implements组合类型，type则可以通过-amp-符号组合、合并类型。\"><a href=\"#3、interface，class使用extends、implements组合类型，type则可以通过-amp-符号组合、合并类型。\" class=\"headerlink\" title=\"3、interface，class使用extends、implements组合类型，type则可以通过&amp;, |符号组合、合并类型。\"></a>3、interface，class使用extends、implements组合类型，type则可以通过&amp;, |符号组合、合并类型。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animals1</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animals2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animals1</span>, <span class=\"title class_\">Animals2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = <span class=\"title class_\">Animals1</span> &amp; <span class=\"title class_\">Animals2</span> &amp; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\"><a href=\"#4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\" class=\"headerlink\" title=\"4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\"></a>4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">aa</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;aa: string, ...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Foo</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">aa</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;aa: number; ...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\"><a href=\"#5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\" class=\"headerlink\" title=\"5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\"></a>5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> foo <span class=\"comment\">//&#123; a: string, b: 2, c: boolean &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\"><a href=\"#从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\" class=\"headerlink\" title=\"从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\"></a>从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal1</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal1</span>, <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// interface 可以使用extends集成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal1</span>, <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// 也可以使用class的extends和implements进行继承</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"可以看出来使用的还是java里面的那一套。-之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用-in-等对类型各种各样的推导操作。\"><a href=\"#可以看出来使用的还是java里面的那一套。-之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用-in-等对类型各种各样的推导操作。\" class=\"headerlink\" title=\"可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。\"></a>可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IDefaultData</span> = <span class=\"keyword\">typeof</span> defaultData <span class=\"comment\">// &#123;name: string; age: number&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Ikeys</span> = keyof defaultData</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同时也可以开始有了通过各种工具类型（有自带的也有自己写的-），对类型进行各种运算\"><a href=\"#同时也可以开始有了通过各种工具类型（有自带的也有自己写的-），对类型进行各种运算\" class=\"headerlink\" title=\"同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算\"></a>同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IDefaultData</span> = <span class=\"keyword\">typeof</span> defaultData <span class=\"comment\">// &#123;name: string; age: number&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Ikeys</span> = keyof defaultData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IData</span> = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">typeof</span> defaultData&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IList</span>  = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Pick</span>&lt;<span class=\"title class_\">IDefaultData</span>, <span class=\"string\">&#x27;name&#x27;</span>&gt; &amp; &#123;<span class=\"attr\">sex</span>: <span class=\"built_in\">number</span>&#125;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">a</span>: infer U; <span class=\"attr\">b</span>: infer U &#125; ? U : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T0</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>&#125;&gt; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T1</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>&#125;&gt; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T6</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">c</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: symbol&#125;&gt; <span class=\"comment\">// symbol</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的推导</strong></li></ul>\n\n<h6 id=\"类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。-不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\"><a href=\"#类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。-不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\" class=\"headerlink\" title=\"类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\"></a>类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A1</span> <span class=\"comment\">//就当它是A1类型吧</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B1</span> <span class=\"comment\">// 就当它是B1类型吧</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = <span class=\"title class_\">Record</span>&lt;keyof <span class=\"title class_\">Foo1</span>, <span class=\"title class_\">Foo</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\"><a href=\"#而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\" class=\"headerlink\" title=\"而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\"></a>而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Parameters</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtain the parameters of a constructor function type in a tuple</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructorParameters</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtain the return type of a function type</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReturnType</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; infer R ? R : <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的条件语句</strong></li></ul>\n\n<h6 id=\"这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承-或许有的人的理解仅限于此-。同时可以有一个约束的功能，其实很像继承的反推。\"><a href=\"#这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承-或许有的人的理解仅限于此-。同时可以有一个约束的功能，其实很像继承的反推。\" class=\"headerlink\" title=\"这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。\"></a>这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>); <span class=\"comment\">// ok👌， arg 受Lengthwise约束，因此lenght是有的</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;N&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以通过extends的约束功能给类型做一个三元表达的条件语句运算`</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的循环遍历</strong></li></ul>\n\n<h6 id=\"既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过-in-对类型进行循环遍历的。同样的，这只能在type中使用\"><a href=\"#既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过-in-对类型进行循环遍历的。同样的，这只能在type中使用\" class=\"headerlink\" title=\"既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用\"></a>既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">d</span>: symbol;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;a: B; b: B; c: B; d: B&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> A &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125; <span class=\"comment\">// error,别问为什么不可以，语言就是这样</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\"><a href=\"#甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\" class=\"headerlink\" title=\"甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\"></a>甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">d</span>: symbol;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">    [ <span class=\"string\">`get<span class=\"subst\">$&#123;k&#125;</span>`</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;geta: B; getb: B; getc: B; getd: B&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同样，作为\"><a href=\"#同样，作为\" class=\"headerlink\" title=\"同样，作为\"></a>同样，作为</h6><ul><li><strong>静态数据的类型</strong></li></ul>\n\n<h6 id=\"说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍-比如说，我们在定义一个mode，或者status时\"><a href=\"#说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍-比如说，我们在定义一个mode，或者status时\" class=\"headerlink\" title=\"说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时\"></a>说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>  = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\"><a href=\"#这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\" class=\"headerlink\" title=\"这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\"></a>这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(status === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mode === <span class=\"string\">&#x27;xxx&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。-其实对于这种静态的类型，建议是不应该用个number和string的。-对于前端自产自销的mode或者status，不妨试试\"><a href=\"#这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。-其实对于这种静态的类型，建议是不应该用个number和string的。-对于前端自产自销的mode或者status，不妨试试\" class=\"headerlink\" title=\"这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试\"></a>这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(status === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mode === <span class=\"string\">&#x27;xxx&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\"><a href=\"#如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\" class=\"headerlink\" title=\"如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\"></a>如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> <span class=\"title class_\">IStatus</span> &#123;</span><br><span class=\"line\">    off,</span><br><span class=\"line\">    on</span><br><span class=\"line\">&#125; <span class=\"comment\">// &#123;off: 0, on: 1&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>  = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"title class_\">Istatus</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 在之后的过程中都可以使用这个IStatus枚举</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了-对于静态的数据，可以做一点拓展知识，那就是as-const。\"><a href=\"#通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了-对于静态的数据，可以做一点拓展知识，那就是as-const。\" class=\"headerlink\" title=\"通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。\"></a>通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cosnt arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] </span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> arr <span class=\"comment\">// string[]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个时候ts的反推类型就是string[]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cosnt arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> arr <span class=\"comment\">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个时候ts的反推类型就是只读熟悉了，它可以用来弥补readonly的一些缺陷</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>动态类型的定义</strong></li></ul>\n\n<h6 id=\"是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。-逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\"><a href=\"#是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。-逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\" class=\"headerlink\" title=\"是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\"></a>是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;a&#x27;</span>|<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"built_in\">any</span>&#125;&gt;<span class=\"function\">(<span class=\"params\">arg: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (arg.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>: ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>: ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg.<span class=\"property\">val</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: T</span><br><span class=\"line\">    <span class=\"attr\">b</span>: U</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\">(<span class=\"params\">a: T</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率-我们可以拿我们熟知的protable的类型定义说起\"><a href=\"#类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率-我们可以拿我们熟知的protable的类型定义说起\" class=\"headerlink\" title=\"类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起\"></a>类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">declare</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ProSchema</span>&lt;T = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, unknown&gt;, <span class=\"title class_\">Extra</span> = unknown, V = <span class=\"title class_\">ProSchemaComponentTypes</span>, <span class=\"title class_\">ValueType</span> = <span class=\"string\">&#x27;text&#x27;</span>&gt; = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@name</span> 确定这个列的唯一值 */</span></span><br><span class=\"line\">    key?: <span class=\"title class_\">React</span>.<span class=\"property\">ReactText</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持一个数字，[a,b] 会转化为 obj.a.b</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@name</span> 与实体映射的key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    dataIndex?: keyof T;</span><br><span class=\"line\"></span><br><span class=\"line\">    render?: <span class=\"function\">(<span class=\"params\">dom: React.ReactNode, entity: T, index: <span class=\"built_in\">number</span>, action: ProCoreActionType, schema: ProSchema&lt;T, Extra&gt; &amp; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        isEditable?: <span class=\"built_in\">boolean</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">type</span>: V;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    &#125;</span>) =&gt;</span> <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\"><a href=\"#处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\" class=\"headerlink\" title=\"处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\"></a>处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。</h6>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础知识概述\"><a href=\"#基础知识概述\" class=\"headerlink\" title=\"基础知识概述\"></a>基础知识概述</h2><h6 id=\"伴随着ts4-3的发布，ts4-4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\"><a href=\"#伴随着ts4-3的发布，ts4-4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\" class=\"headerlink\" title=\"伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。\"></a>伴随着ts4.3的发布，ts4.4也已经处于beta阶段了，ts成为了一个前端规范的趋势，随之vue、react和其他的plugin都开始了使用ts进行编写，ts已经成为了一个前端开发者所必需熟悉的一个东西。能否写出准确的ts类型也成为了一段代码的质量的评判条件之一。</h6><h6 id=\"ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\"><a href=\"#ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\" class=\"headerlink\" title=\"ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。\"></a>ts类型并不是只能有类型定义，然后给逻辑代码用这么简单。也并不是说代码懂得了一个any这样的全能类型，然后就到处使用any，只关心逻辑代码这块（能跑就行！！！！）。</h6><h2>1、是开发和维护过程中的工具</h2>\n\n<h6 id=\"对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\"><a href=\"#对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\" class=\"headerlink\" title=\"对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。\"></a>对于ts类型，他也是有自己的编程逻辑的。对于它，我们可以将它理解成一个我们项目开发与维护的工具，这个取决于我们对这个工具的了解程度和利用的程度，利用的好，它是规范我们的逻辑代码的一大利器，代码中的变量便会在明确的类型指引下快速且高效的开发。</h6><ul><li><strong>约束某一块代码的具体功能</strong></li></ul>\n\n<h6 id=\"比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。-比如说：\"><a href=\"#比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。-比如说：\" class=\"headerlink\" title=\"比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：\"></a>比如说在一个函数中，我们因为有了一个函数的约束，我们可以很明确的知道这个段逻辑块要完成的是一个什么样的功能，不得不说的是，很多人觉得ts是个累赘，那就是很多人都是先写逻辑，后写类型的，就是一种差不多的想法，代码能跑就行，最后只能写成了anyscript。 比如说：</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">arg</span>: A): <span class=\"function\"><span class=\"params\">B</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\"><a href=\"#我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\" class=\"headerlink\" title=\"我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。\"></a>我们便能知道这个函数是一个要将A类型的变量处理处理成B类型的函数，这段代码有这样的作用就通过类型就可以显而易见了，当然前提是A和B的类型是明确的，不能写一个any，Object草草了事，当然在返回类型是也要尽量的准确点，比如说，有的时候为了一个求一个逻辑代码写的顺畅，盲目的让类型迎合变量。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">a</span>: A): <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\"><span class=\"params\">boolean</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = (<span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">object</span> | <span class=\"built_in\">boolean</span>): <span class=\"function\"><span class=\"params\">B</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\"><a href=\"#这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\" class=\"headerlink\" title=\"这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。\"></a>这样的做法在ts编程的时候是不可取（不建议）的，其实在纯js中也是不建议这样的，这样失去了逻辑快单一功能的原则，会让后续的对它的维护显得特别的困难，在之后的调试过程中也会显得格外的困难。</h6><h6 id=\"可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\"><a href=\"#可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\" class=\"headerlink\" title=\"可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。\"></a>可能，我们会真的碰到这个函数逻辑就是要这样的耦合，那么我们不妨试试另一种类型声明的方式。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: A, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型A时，那么b的类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: B, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型B时，那么b的类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> foo &#123;(<span class=\"attr\">a</span>: C, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): D&#125; <span class=\"comment\">// 参数a为类型C时，那么b的类型为number，且函数会有返回值D。</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\"><a href=\"#这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\" class=\"headerlink\" title=\"这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。\"></a>这三个都是给一个函数声明类型，然后可以很有效的做到逻辑耦合但是类型不耦合，同时也对函数的调用起到了类型校验的作用，不再是像以前写着一个联合类型，让人调用函数的时候觉得这个类型有点傻乎乎的样子，什么也不懂。</h6><h6 id=\"这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\"><a href=\"#这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\" class=\"headerlink\" title=\"这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。\"></a>这样的方式可以在很大的程度上，让函数的调用变得轻松，不至于让写出的东西让别人无法调用或者类型靠as去断言。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 参数a为类型string时，那么b的类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;(<span class=\"attr\">a</span>: <span class=\"built_in\">boolean</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span>&#125; <span class=\"comment\">// 参数a为类型boolean时，那么b的类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>: <span class=\"title class_\">Foo</span> = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">string</span> | <span class=\"built_in\">boolean</span>, b: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">2</span>); <span class=\"comment\">// error,a为string类型时，b参数的类型为string</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"literal\">false</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ok👌</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"literal\">true</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// error,第一个参数为boolean时，第二个参数必须为数字</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\"><a href=\"#注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\" class=\"headerlink\" title=\"注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。\"></a>注：这样声明的类型只能用interface，原因可以见下文的interface、type和class的区别。</h6><h6 id=\"对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。-其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\"><a href=\"#对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。-其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\" class=\"headerlink\" title=\"对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。\"></a>对于函数的逻辑块的类型声明可以这样，同理，组件中我们也可以做到。 其实组件中特别是想要复用性高一点的组件，一般都不会太建议太高的耦合度了，但是，方法也是有的了。</h6><h6 id=\"在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\"><a href=\"#在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\" class=\"headerlink\" title=\"在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做\"></a>在react中，如果是函数式组件，我们可以跟上面说的函数定义一样的去做</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A1</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A2</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ComponentA</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">IProps</span>&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。-在class组件中，这样的做法会显得更加简便\"><a href=\"#同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。-在class组件中，这样的做法会显得更加简便\" class=\"headerlink\" title=\"同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便\"></a>同样，这样的耦合度对于这个组件的编写还是不太好的，但是很大程度上可以简化组件的调用，让别人可以更好的去调用它。 在class组件中，这样的做法会显得更加简便</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ComponentA</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;....&#125;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(): A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ComponentA</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ComponentA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;.....&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (....)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\"><a href=\"#这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\" class=\"headerlink\" title=\"这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。\"></a>这样子对组件的编写过程起到的作用还是比较小的，但是对于组件的调用却有很大的意义，它可以查出组件错误的调用方式。</h6><ul><li><strong>约束静态数据</strong></li></ul>\n\n<h6 id=\"作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。-比如说我们在定义如下数据的类型时\"><a href=\"#作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。-比如说我们在定义如下数据的类型时\" class=\"headerlink\" title=\"作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时\"></a>作为工具，说白了就是没有它也一样，照样可以做出我想要的东西。但是ts能够一直发展过来，能够受到这么多的前端开发者的青睐自有它的原因。它确实是可以很好的去约束我们的代码，约束我们开发过程中所制造出的各种数据，这个也是取决于，自己对ts的理解程度的。 比如说我们在定义如下数据的类型时</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> schedule = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;01:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"comment\">// ..... 省略，每隔30一个</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;12:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;12:30&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;13:00&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;13:30&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;22:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;23:00&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;23:30&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在只知道interface，type的时候会一项一项的列出来\"><a href=\"#在只知道interface，type的时候会一项一项的列出来\" class=\"headerlink\" title=\"在只知道interface，type的时候会一项一项的列出来\"></a>在只知道interface，type的时候会一项一项的列出来</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:00&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;00:30&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;01:00&#x27;</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">   <span class=\"comment\">// ..... 省略，每隔30一个</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"然后再深入，知道了-in-，然后又会觉得，类型不过如此，会直接在写出\"><a href=\"#然后再深入，知道了-in-，然后又会觉得，类型不过如此，会直接在写出\" class=\"headerlink\" title=\"然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出\"></a>然后再深入，知道了[in]，然后又会觉得，类型不过如此，会直接在写出</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"之后，更加深入的去知道了自带的工具类型\"><a href=\"#之后，更加深入的去知道了自带的工具类型\" class=\"headerlink\" title=\"之后，更加深入的去知道了自带的工具类型\"></a>之后，更加深入的去知道了自带的工具类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ISchedule</span> = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\"><a href=\"#很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\" class=\"headerlink\" title=\"很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。\"></a>很明显，对ts的使用程度就可以体现出来了，写法的不同，ts发挥的作用也都是不同的。</h6><h6 id=\"后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\"><a href=\"#后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\" class=\"headerlink\" title=\"后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串\"></a>后面两种的写法很明显只是为了规避eslint的报错而写的类型的，定义太宽泛，这个时候如果是前端自己写类型定义可以使用类型的模板字符串</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> N = <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span> | <span class=\"number\">4</span> | <span class=\"number\">5</span> | <span class=\"number\">6</span> | <span class=\"number\">7</span> | <span class=\"number\">8</span> | <span class=\"number\">9</span> | <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Time</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;N&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> <span class=\"title class_\">CheckEnum</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Record</span>&lt;<span class=\"string\">`<span class=\"subst\">$&#123;Time&lt;<span class=\"number\">0</span> | <span class=\"number\">1</span>&gt; | Time&lt;<span class=\"number\">2</span>&gt;&#125;</span>:<span class=\"subst\">$&#123;<span class=\"string\">&#x27;00&#x27;</span> | <span class=\"string\">&#x27;30&#x27;</span>&#125;</span>`</span>, <span class=\"title class_\">CheckEnum</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"模板字符串，它集成了-in-语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。-当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性-比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\"><a href=\"#模板字符串，它集成了-in-语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。-当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性-比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\" class=\"headerlink\" title=\"模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。\"></a>模板字符串，它集成了[in]语法糖，让所有的可能类型自由组合，可以自动对所有的情况做一次遍历。 当然这样写只是为了提示一下ts的新特性中还有类型模板字符串，但是也可以看得出，ts的类型也越来越完善，可以让类型定义的越来越精确。有了这个模板字符串，很多的以前我们就写一个string的类型，我们都可以给定一个更加精确的定义，来保证我们的类型的准确性 比如说，我们给request定义url的时候我们就可以不写string，完全可以定义一个独有的IUrl类型，来规范url的编写。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IUrl</span> = <span class=\"string\">`/<span class=\"subst\">$&#123;<span class=\"built_in\">string</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> request = &lt;R&gt;<span class=\"function\">(<span class=\"params\">url: IUrl, options</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就可以避免犯前面忘了加-x2F-这样的低级错误。-此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\"><a href=\"#这样就可以避免犯前面忘了加-x2F-这样的低级错误。-此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\" class=\"headerlink\" title=\"这样就可以避免犯前面忘了加 &#x2F; 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。\"></a>这样就可以避免犯前面忘了加 &#x2F; 这样的低级错误。 此外，类型模版字符串甚至可以用于校验电话号码，时间格式等字符串类型的数据，预防静态数据认为输入是校验太少而出现的错误。</h6><ul><li><strong>类型的断言</strong></li></ul>\n\n<h6 id=\"其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\"><a href=\"#其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\" class=\"headerlink\" title=\"其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。\"></a>其实ts作为工具，它和eslint的功能差不多，都是一个规范代码书写，可快发提效的手段。同时也会遇到一些ts无法准确做出判断的时候，毕竟ts是不参与逻辑代码的计算的，应该说，是不支持解耦之后的代码的类型运算。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">arg: Foo1 | Foo2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg.<span class=\"property\">type</span> === <span class=\"string\">&#x27;a&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// arg is Foo1</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg.<span class=\"property\">type</span> === <span class=\"string\">&#x27;b&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// arg is F002</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\"><a href=\"#在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\" class=\"headerlink\" title=\"在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。\"></a>在这种前后耦合的情况下类型还是可以会能有自己的推导的，具体的，可以去看类型的合成与拆分，这也是在某个函数一定要耦合的时候建议的做法。</h6><h6 id=\"好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\"><a href=\"#好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\" class=\"headerlink\" title=\"好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动\"></a>好了以上的还是题外话，想提醒一下，是不是类型的联合都还搞不清楚。对于一些情况，比如说我们在一些dialog中，我们有时候会习惯用一个对象来驱动弹窗的显隐。让弹窗的显隐通过是否有数据驱动</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Dialog</span> visible=&#123;!!data&#125; close=&#123;data.<span class=\"property\">close</span>&#125;&gt; <span class=\"comment\">// error, data可能为undefined</span></span><br><span class=\"line\"> <span class=\"comment\">// some thing</span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">Dialog</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\"><a href=\"#这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\" class=\"headerlink\" title=\"这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了\"></a>这种情况下就难免会给data定义undefined的联合类型的了，到了一些方法中，这个主要是因为数据与视图解耦了，ts就会提醒你某个参数有可能为undefined，但是为undefined的时候数据都是不执行的，其实前面做一个非空检验也没什么大不了的，但是这个时候就看的出ts就比较傻了，此时我们的断言就可以用上了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Dialog</span> visible=&#123;!!data&#125; close=&#123;data!.<span class=\"property\">close</span>&#125;&gt; <span class=\"comment\">// ok, 这里可以用一个非空断言</span></span><br><span class=\"line\"> <span class=\"comment\">// some thing</span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">Dialog</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"大部分的时候非空断言-，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\"><a href=\"#大部分的时候非空断言-，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\" class=\"headerlink\" title=\"大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。\"></a>大部分的时候非空断言( ! )，我们基本上就够用了，可以解决大部分类型推导不过来的问题。</h6><h6 id=\"但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\"><a href=\"#但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\" class=\"headerlink\" title=\"但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。\"></a>但是还有很多时候，ts的使用程度不同的人会出现不一样的情况，有的人对类型的定义严格，有的人定义的宽松，为什么会这样可以看前面的概述。但是问题还是要解决的，我们这个时候如果真的非常肯定不会出问题，那么我们不妨试试as断言。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">number</span> ｜ <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">arg: Foo2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a</span>: <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a) <span class=\"comment\">// error, Foo1类型不能给Foo2类型！</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a <span class=\"keyword\">as</span> <span class=\"title class_\">Foo2</span>) <span class=\"comment\">//ok，Foo2类型只是比Foo1类型更小，此处的断言可以告诉ts，我比你更清楚这个数据</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as-unknown-as-…、as-any-as-…。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。-话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\"><a href=\"#从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as-unknown-as-…、as-any-as-…。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。-话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\" class=\"headerlink\" title=\"从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as …、as any as …。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。\"></a>从这个小例子中我们可以看出，断言对很多类型逃避主义的人其实也是一个非常大的福音，类型定义的时候宽泛就好了，衔接不上的时候直接as unknown as …、as any as …。如果有这种的行为，我也只能说，干的漂亮！ts技术又有了一点提升，只要代码能跑，还真让别人挑不出一点ts的毛病。 话说回来，还是好好的重视类型报错、严格的定义类型吧，如果真的是有非要有耦合的情况，可以看看上面本节的第一点说的方法吧。ts要不了多少时间的，真的可以避免错误，还有减少很多找bug的时间。</h6><ul><li><strong>全局类型声明</strong></li></ul>\n\n<h6 id=\"应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\"><a href=\"#应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\" class=\"headerlink\" title=\"应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。\"></a>应该很多人想过一个问题，为什么我们可以不需要引入，就可以用Record、Omit、Partail这样的工具类型。还有就是，我们自己开发过程中其实也写出了很多的好用的类型，有的是可以完全脱离某个项目，直接到处都可以用的，比如说我们Omit的源码。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Omit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\"><a href=\"#它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\" class=\"headerlink\" title=\"它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit\"></a>它的第二个参数受的是any约束，虽然也有它的原因，但是我们完全可以自己再写一个MyOmit</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyOmit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就可以使得MyOmit更符合我们的需求。\"><a href=\"#这样就可以使得MyOmit更符合我们的需求。\" class=\"headerlink\" title=\"这样就可以使得MyOmit更符合我们的需求。\"></a>这样就可以使得MyOmit更符合我们的需求。</h6><h6 id=\"下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\"><a href=\"#下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\" class=\"headerlink\" title=\"下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？\"></a>下面的问题来了，如果我们只是这样的定义一下，别的地方想使用每次都得要去import，但是这个东西本来就是开发的时候稍微用一样，打包的时候都是去掉的。那么有什么办法可以别的地方直接用就好了？？</h6><h6 id=\"其实这个也很简单，只需要在根目录下定义一个-d-ts，文件就好了\"><a href=\"#其实这个也很简单，只需要在根目录下定义一个-d-ts，文件就好了\" class=\"headerlink\" title=\"其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了\"></a>其实这个也很简单，只需要在根目录下定义一个.d.ts，文件就好了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">type</span> <span class=\"title class_\">MyOmit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就好了，就可以在整个项目中使用了。\"><a href=\"#这样就好了，就可以在整个项目中使用了。\" class=\"headerlink\" title=\"这样就好了，就可以在整个项目中使用了。\"></a>这样就好了，就可以在整个项目中使用了。</h6><h6 id=\"如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\"><a href=\"#如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\" class=\"headerlink\" title=\"如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。\"></a>如果你以为这一点就这么完了，那你想的肯定是太简单了，另外拓展一下，其实类型也是可以改写的😂😂。</h6><h6 id=\"比如说，在使用Object-entries的时候，通过lib-es2017-d-ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\"><a href=\"#比如说，在使用Object-entries的时候，通过lib-es2017-d-ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\" class=\"headerlink\" title=\"比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。\"></a>比如说，在使用Object.entries的时候，通过lib.es2017.d.ts中的源码可以看到，entries的类型定义还是有点不太好，不太适合日常的ts类型开发。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an array of key/values of the enumerable properties of an object</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">entries&lt;T&gt;(<span class=\"attr\">o</span>: &#123; [<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>]: T &#125; | <span class=\"title class_\">ArrayLike</span>&lt;T&gt;): [<span class=\"built_in\">string</span>, T][];</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\"><a href=\"#这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\" class=\"headerlink\" title=\"这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。\"></a>这个时候，我们就可以考虑一下改写它的类型，当然不是去修改编辑器的代码，别想太多。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ObjectConstructor</span> &#123;</span><br><span class=\"line\">  entries&lt;T&gt;(<span class=\"attr\">obj</span>: T): [keyof T, T[keyof T]][];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2>2、是一个具有编程思想的语言</h2>\n\n<h6 id=\"上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\"><a href=\"#上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\" class=\"headerlink\" title=\"上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。\"></a>上一节中我们从typescript是一个规范开发的工具入手，讲述了ts可以有的几大功能。那么这一节，就讲述一下typescript其实也是有一定的编程思想的。它也是有自己的变量声明、条件语句、循环语句、作用域的，当你习惯了这个编程思想之后，就能够更加深刻的感受到ts所带来的便利。</h6><ul><li><strong>interface、type、class的区别</strong></li></ul>\n\n<h6 id=\"很多人对interface、type的理解仅仅只是一个声明类型方式的区别。-但是事实上，它就是类型定义的一个区别。-只不过，有以下几点的区别：\"><a href=\"#很多人对interface、type的理解仅仅只是一个声明类型方式的区别。-但是事实上，它就是类型定义的一个区别。-只不过，有以下几点的区别：\" class=\"headerlink\" title=\"很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别：\"></a>很多人对interface、type的理解仅仅只是一个声明类型方式的区别。 但是事实上，它就是类型定义的一个区别。 只不过，有以下几点的区别：</h6><h6 id=\"1、type，class定义的类型不可以重复，interface定义的类型可以重复\"><a href=\"#1、type，class定义的类型不可以重复，interface定义的类型可以重复\" class=\"headerlink\" title=\"1、type，class定义的类型不可以重复，interface定义的类型可以重复\"></a>1、type，class定义的类型不可以重复，interface定义的类型可以重复</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Record</span> = &#123;...&#125; <span class=\"comment\">// error, Record已经被定义过</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ObjectConstructor</span> &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125; <span class=\"comment\">// ok👌，interface 定义的类型可以重复定义，重新给Object的一些原型方法写类型</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这就是在上节中所讲的类型可以被重写的另一个知识点。-2、type声明的对象可以使用-in-，interface，class的不可以\"><a href=\"#这就是在上节中所讲的类型可以被重写的另一个知识点。-2、type声明的对象可以使用-in-，interface，class的不可以\" class=\"headerlink\" title=\"这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以\"></a>这就是在上节中所讲的类型可以被重写的另一个知识点。 2、type声明的对象可以使用[in]，interface，class的不可以</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Keys</span> = <span class=\"string\">&quot;小王&quot;</span> | <span class=\"string\">&quot;小文&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> X = &#123;</span><br><span class=\"line\">  [key <span class=\"keyword\">in</span> <span class=\"title class_\">Keys</span>]: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">test</span>: X = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;小王&#x27;</span>: <span class=\"string\">&#x27;肌肉男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;小文&#x27;</span>: <span class=\"string\">&#x27;也是肌肉男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> XX &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keys]: <span class=\"built_in\">string</span> <span class=\"comment\">// error!!!</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、interface，class使用extends、implements组合类型，type则可以通过-amp-符号组合、合并类型。\"><a href=\"#3、interface，class使用extends、implements组合类型，type则可以通过-amp-符号组合、合并类型。\" class=\"headerlink\" title=\"3、interface，class使用extends、implements组合类型，type则可以通过&amp;, |符号组合、合并类型。\"></a>3、interface，class使用extends、implements组合类型，type则可以通过&amp;, |符号组合、合并类型。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animals1</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animals2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animals1</span>, <span class=\"title class_\">Animals2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = <span class=\"title class_\">Animals1</span> &amp; <span class=\"title class_\">Animals2</span> &amp; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\"><a href=\"#4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\" class=\"headerlink\" title=\"4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。\"></a>4、interface定义的类型可以被改写，type、class定义的类型不可以被改写。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">aa</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;aa: string, ...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Foo</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">aa</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;aa: number; ...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\"><a href=\"#5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\" class=\"headerlink\" title=\"5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。\"></a>5、type可以使用typeof、keyof、infer去反推类型，interface、class不可以。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> foo <span class=\"comment\">//&#123; a: string, b: 2, c: boolean &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\"><a href=\"#从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\" class=\"headerlink\" title=\"从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。\"></a>从以上的几点区别可以看出，类型的定义上，interface和class更像是给ecmascript增加了接口的概念，让类型与代码可以耦合，真正的将js变成了强类型语言（当然总是联合类型就另说了，基本上不会在意这么多了，基本上就不会管类型声明上的区别了）。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal1</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal1</span>, <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// interface 可以使用extends集成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal1</span>, <span class=\"title class_\">Animal2</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// 也可以使用class的extends和implements进行继承</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"可以看出来使用的还是java里面的那一套。-之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用-in-等对类型各种各样的推导操作。\"><a href=\"#可以看出来使用的还是java里面的那一套。-之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用-in-等对类型各种各样的推导操作。\" class=\"headerlink\" title=\"可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。\"></a>可以看出来使用的还是java里面的那一套。 之后的type的类型定义，便又是另一个编程思想了，它就是一个类型编程的思想了。它可以使用typeof，keyof，infer等各种类型推导。同时可以使用[in]等对类型各种各样的推导操作。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IDefaultData</span> = <span class=\"keyword\">typeof</span> defaultData <span class=\"comment\">// &#123;name: string; age: number&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Ikeys</span> = keyof defaultData</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同时也可以开始有了通过各种工具类型（有自带的也有自己写的-），对类型进行各种运算\"><a href=\"#同时也可以开始有了通过各种工具类型（有自带的也有自己写的-），对类型进行各种运算\" class=\"headerlink\" title=\"同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算\"></a>同时也可以开始有了通过各种工具类型（有自带的也有自己写的 ），对类型进行各种运算</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IDefaultData</span> = <span class=\"keyword\">typeof</span> defaultData <span class=\"comment\">// &#123;name: string; age: number&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Ikeys</span> = keyof defaultData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IData</span> = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">typeof</span> defaultData&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IList</span>  = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Pick</span>&lt;<span class=\"title class_\">IDefaultData</span>, <span class=\"string\">&#x27;name&#x27;</span>&gt; &amp; &#123;<span class=\"attr\">sex</span>: <span class=\"built_in\">number</span>&#125;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">a</span>: infer U; <span class=\"attr\">b</span>: infer U &#125; ? U : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T0</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>&#125;&gt; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T1</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>&#125;&gt; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">T6</span> = <span class=\"title class_\">Foo</span>&lt;&#123;<span class=\"attr\">a</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">c</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">b</span>: symbol&#125;&gt; <span class=\"comment\">// symbol</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的推导</strong></li></ul>\n\n<h6 id=\"类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。-不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\"><a href=\"#类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。-不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\" class=\"headerlink\" title=\"类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型\"></a>类型的推导那就是比较考验对类型够不够理解了，主要涉及到的ts知识点就为typeof、keyof、infer。 不过值得说的就是infer对于业务代码中的类型使用还是没那么多的。用的最多的还是typeof和keyof，它可以让人更快速的去得到想要的类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo1</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"variable constant_\">A1</span> <span class=\"comment\">//就当它是A1类型吧</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"variable constant_\">B1</span> <span class=\"comment\">// 就当它是B1类型吧</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo2</span> = <span class=\"title class_\">Record</span>&lt;keyof <span class=\"title class_\">Foo1</span>, <span class=\"title class_\">Foo</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\"><a href=\"#而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\" class=\"headerlink\" title=\"而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型\"></a>而对于infer，我们很多时候可以用它来制作工具类型，我们这个时候是可以参考Parammeters、ReturnType等工具类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Parameters</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtain the parameters of a constructor function type in a tuple</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructorParameters</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtain the return type of a function type</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReturnType</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; infer R ? R : <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的条件语句</strong></li></ul>\n\n<h6 id=\"这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承-或许有的人的理解仅限于此-。同时可以有一个约束的功能，其实很像继承的反推。\"><a href=\"#这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承-或许有的人的理解仅限于此-。同时可以有一个约束的功能，其实很像继承的反推。\" class=\"headerlink\" title=\"这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。\"></a>这个又是一个关于extends的作用了，extends它不仅可以在interface上可以使用继承(或许有的人的理解仅限于此)。同时可以有一个约束的功能，其实很像继承的反推。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>); <span class=\"comment\">// ok👌， arg 受Lengthwise约束，因此lenght是有的</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"number\">0</span> | <span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;N&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;T&#125;</span><span class=\"subst\">$&#123;<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以通过extends的约束功能给类型做一个三元表达的条件语句运算`</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>类型的循环遍历</strong></li></ul>\n\n<h6 id=\"既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过-in-对类型进行循环遍历的。同样的，这只能在type中使用\"><a href=\"#既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过-in-对类型进行循环遍历的。同样的，这只能在type中使用\" class=\"headerlink\" title=\"既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用\"></a>既然是可以编程的，那就不可以缺少循环遍历的语句了。ts的类型也是可以通过[in]对类型进行循环遍历的。同样的，这只能在type中使用</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">d</span>: symbol;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;a: B; b: B; c: B; d: B&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> A &#123;</span><br><span class=\"line\">    [k <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125; <span class=\"comment\">// error,别问为什么不可以，语言就是这样</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\"><a href=\"#甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\" class=\"headerlink\" title=\"甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型\"></a>甚至乎，我们还可以使用类型模版字符串，快速的写出更加标准的类型</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">d</span>: symbol;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">    [ <span class=\"string\">`get<span class=\"subst\">$&#123;k&#125;</span>`</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Foo</span>]: B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;geta: B; getb: B; getc: B; getd: B&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同样，作为\"><a href=\"#同样，作为\" class=\"headerlink\" title=\"同样，作为\"></a>同样，作为</h6><ul><li><strong>静态数据的类型</strong></li></ul>\n\n<h6 id=\"说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍-比如说，我们在定义一个mode，或者status时\"><a href=\"#说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍-比如说，我们在定义一个mode，或者status时\" class=\"headerlink\" title=\"说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时\"></a>说到这个，我们就不得不说的了，很多时候，我们写一个string，number其实也算是一个类型的敷衍 比如说，我们在定义一个mode，或者status时</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>  = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\"><a href=\"#这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\" class=\"headerlink\" title=\"这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样\"></a>这样的类型定义，其实很明显也是在逃避的，毕竟后面的status或者mode也有可能是要用的。后面的代码很有可能就会这样</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(status === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mode === <span class=\"string\">&#x27;xxx&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。-其实对于这种静态的类型，建议是不应该用个number和string的。-对于前端自产自销的mode或者status，不妨试试\"><a href=\"#这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。-其实对于这种静态的类型，建议是不应该用个number和string的。-对于前端自产自销的mode或者status，不妨试试\" class=\"headerlink\" title=\"这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试\"></a>这样就是让后面的维护者风中凌乱了，很不利于维护，同时那个number和string也很容易写错。 其实对于这种静态的类型，建议是不应该用个number和string的。 对于前端自产自销的mode或者status，不妨试试</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(status === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mode === <span class=\"string\">&#x27;xxx&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\"><a href=\"#如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\" class=\"headerlink\" title=\"如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了\"></a>如果是对于后端返回的而且要用到的，这个时候就可以使用枚举了</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> <span class=\"title class_\">IStatus</span> &#123;</span><br><span class=\"line\">    off,</span><br><span class=\"line\">    on</span><br><span class=\"line\">&#125; <span class=\"comment\">// &#123;off: 0, on: 1&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>  = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"title class_\">Istatus</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 在之后的过程中都可以使用这个IStatus枚举</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了-对于静态的数据，可以做一点拓展知识，那就是as-const。\"><a href=\"#通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了-对于静态的数据，可以做一点拓展知识，那就是as-const。\" class=\"headerlink\" title=\"通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。\"></a>通过这个就不得不说一下了，其实enum与相似，它既可以参与逻辑，也可以参与类型。在类型中它可以表示一个基本类型。在逻辑中，它就可以充当出一个constant的作用了 对于静态的数据，可以做一点拓展知识，那就是as const。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cosnt arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] </span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> arr <span class=\"comment\">// string[]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个时候ts的反推类型就是string[]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cosnt arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">typeof</span> arr <span class=\"comment\">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个时候ts的反推类型就是只读熟悉了，它可以用来弥补readonly的一些缺陷</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><strong>动态类型的定义</strong></li></ul>\n\n<h6 id=\"是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。-逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\"><a href=\"#是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。-逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\" class=\"headerlink\" title=\"是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。\"></a>是编程，那么就得有变量的声明，和数据的自顶向下的数据流，ts中也是一样的，这个东西便是泛型了。有了它，就可以正式的将类型带入了编程的行列。 逻辑代码上泛型可以跟函数跟类进行耦合，去写出一个更加可用的模块。</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;a&#x27;</span>|<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"built_in\">any</span>&#125;&gt;<span class=\"function\">(<span class=\"params\">arg: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (arg.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>: ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>: ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg.<span class=\"property\">val</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: T</span><br><span class=\"line\">    <span class=\"attr\">b</span>: U</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\">(<span class=\"params\">a: T</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率-我们可以拿我们熟知的protable的类型定义说起\"><a href=\"#类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率-我们可以拿我们熟知的protable的类型定义说起\" class=\"headerlink\" title=\"类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起\"></a>类型编程上我们可以通过泛型，写出各种好用的工具类型，提升我们的开发效率 我们可以拿我们熟知的protable的类型定义说起</h6><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">declare</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ProSchema</span>&lt;T = <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, unknown&gt;, <span class=\"title class_\">Extra</span> = unknown, V = <span class=\"title class_\">ProSchemaComponentTypes</span>, <span class=\"title class_\">ValueType</span> = <span class=\"string\">&#x27;text&#x27;</span>&gt; = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@name</span> 确定这个列的唯一值 */</span></span><br><span class=\"line\">    key?: <span class=\"title class_\">React</span>.<span class=\"property\">ReactText</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支持一个数字，[a,b] 会转化为 obj.a.b</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@name</span> 与实体映射的key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    dataIndex?: keyof T;</span><br><span class=\"line\"></span><br><span class=\"line\">    render?: <span class=\"function\">(<span class=\"params\">dom: React.ReactNode, entity: T, index: <span class=\"built_in\">number</span>, action: ProCoreActionType, schema: ProSchema&lt;T, Extra&gt; &amp; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        isEditable?: <span class=\"built_in\">boolean</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">type</span>: V;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    &#125;</span>) =&gt;</span> <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\"><a href=\"#处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\" class=\"headerlink\" title=\"处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。\"></a>处于一个Protable的复杂度，这里只截取了其中的一小段。可以看到我们会把传入的一行的类型到做参数T传进来，在dataIndex和render这里直接把T当作一个类型使用。</h6>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}